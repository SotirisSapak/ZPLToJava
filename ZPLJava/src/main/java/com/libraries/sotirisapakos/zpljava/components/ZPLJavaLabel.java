/*
 * Copyright 2022 SotirisSapak
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.libraries.sotirisapakos.zpljava.components;

import com.libraries.sotirisapakos.zpljava.config.LabelSize;
import com.libraries.sotirisapakos.zpljava.superClasses.ZPLJavaComponent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Locale;

/**
 * ZPLJavaLabel is the basic structure component to hold any {@link ZPLJavaComponent} object.
 */
public class ZPLJavaLabel {

    // -------------------------------- parameters --------------------------------

    /**
     * Hold {@link ZPLJavaComponent} objects to {@link ArrayList} object.
     */
    private ArrayList<ZPLJavaComponent> components = new ArrayList<>();

    /**
     * Generated zpl code will be saved at this string parameter.
     */
    private String labelCode = "";

    private int labelWidthInches;
    private int labelHeightInches;

    private int labelWidth = LabelSize.DEFAULT_WIDTH_INCHES * LabelSize._8DPMM;
    private int labelHeight = LabelSize.DEFAULT_HEIGHT_INCHES * LabelSize._8DPMM;

    private boolean utf8FormatEnabled = true;

    // -------------------------------- constructors --------------------------------

    public ZPLJavaLabel(){}
    /**
     * Constructor to create a label giving the standard parameters about sizing!
     * @param inchesWidth label in inches. Accepted inches above zero!
     * @param inchesHeight label in inches. Accepted inches above zero!
     * @param dpmmValue prefer to use one of the below values:
     *                  <ul>
     *                      <li>{@link LabelSize#_6DPMM}</li>
     *                      <li>{@link LabelSize#_8DPMM}</li>
     *                      <li>{@link LabelSize#_12DPMM}</li>
     *                      <li>{@link LabelSize#_24DPMM}</li>
     *                  </ul>
     *                  Of course, you can add whatever value, above zero, you want!
     */
    public ZPLJavaLabel(int inchesWidth, int inchesHeight, int dpmmValue){
        labelWidthInches = inchesWidth;
        labelHeightInches = inchesHeight;
        setLabelSize(inchesWidth, inchesHeight, dpmmValue);
    }

    // -------------------------------- functionality --------------------------------

    /**
     * @param inchesWidth label in inches. Accepted inches above zero!
     * @param inchesHeight label in inches. Accepted inches above zero!
     * @param dpmmValue prefer to use one of the below values:
     *                  <ul>
     *                      <li>{@link LabelSize#_6DPMM}</li>
     *                      <li>{@link LabelSize#_8DPMM}</li>
     *                      <li>{@link LabelSize#_12DPMM}</li>
     *                      <li>{@link LabelSize#_24DPMM}</li>
     *                  </ul>
     *                  Of course, you can add whatever value, above zero, you want!
     */
    public void setLabelSize(int inchesWidth, int inchesHeight, int dpmmValue) {
        if(inchesWidth<=0 || inchesHeight<=0 || dpmmValue<=0) return;
        this.labelWidth = inchesWidth * dpmmValue;
        this.labelHeight = inchesHeight * dpmmValue;
    }
    /**
     * Call this function at the end of label creation process to generate zpl code.
     * To get generated code, use {@link #getLabelCode()} method after generating code
     */
    public void generateLabelCode(){
        String message = "ZPL code generated by { " + ZPLJavaLabel.class.getSimpleName() + " } class";
        String modify = "Please do not modify any parameter or will change the label appearance";
        StringBuilder code = new StringBuilder();
        code.append("^XA\n\n");
        code.append("\t^FX ").append(message).append("\n");
        code.append("\t^FX ").append(modify).append("\n\n");
        code.append("\t^FX Label values: \n");
        code.append("\t^FX ---------------------------------\n");
        code.append("\t^FX label total width: ").append(labelWidth).append(" {")
                .append(labelWidthInches).append(" inches}\n");
        code.append("\t^FX label total height: ").append(labelHeight).append(" {")
                .append(labelHeightInches).append(" inches}\n");
        code.append("\t^FX ---------------------------------\n\n");
        code.append("\t^FX Label structure \n");
        code.append("\t^FX ---------------------------------\n");
        if(utf8FormatEnabled) {
            code.append("\t^FX Enable UTF-8 format\n");
            code.append("\t^CI28\n");
        }
        for (ZPLJavaComponent component: components) {
            code.append(String.format(Locale.ENGLISH,
                    "\t^FX  Generate {%s} component", component.getId()));
            code.append("\n");
            component.generateInstruction();
            code.append("\t").append(component);
            code.append("\n");
        }
        code.append("\t^FX  -----------------------------------------------\n");
        code.append("^XZ");
        this.labelCode = code.toString();
    }

    /**
     * Use this function to add all created {@link ZPLJavaComponent components} to label separated by
     * commas.
     * <p>Example: <code>label.addAllComponents(component1, component2, component3);</code></p>
     * @param components all {@link ZPLJavaComponent} components you want to add to label
     */
    public void addAllComponents(ZPLJavaComponent...components){
        this.components.addAll(Arrays.asList(components));
        generateLabelCode();
    }
    public ArrayList<ZPLJavaComponent> getComponents() {
        return components;
    }

    public void addComponent(ZPLJavaComponent component){
        components.add(component);
        generateLabelCode();
    }
    /**
     * This method will use the inserted components like a stack, in order to place them like a one-column
     * grid.
     * <p><b>Note: </b> Will break all {@link ZPLJavaComponent#belowOf(ZPLJavaComponent)} you may have added
     * in your class. This method, will call belowOf() function based on the order you add the components in label</p>
     */
    public void convertLayoutToStack(){
        if(components.isEmpty()) {
            System.out.println("Add at least one component to label");
            return;
        }

        for (int i=0; i<components.size()-1; i++) {
            ZPLJavaComponent component = components.get(i);
            ZPLJavaComponent componentNext = components.get(i+1);
            if(component.getId().equalsIgnoreCase("borderBox")) continue;
            componentNext.belowOf(component);

            // there is one exception found...
            // if component is ZPLJavaBarcode and BarcodeTextPlacement.TEXT_ABOVE then
            // should set barcode marginTop value because size will be increased at the bottom of the
            // barcode and not from the top.
            ZPLJavaBarcode tempBarcode;
            if(componentNext instanceof ZPLJavaBarcode) {
                tempBarcode = (ZPLJavaBarcode) componentNext;
                if(tempBarcode.getBarcodeTextPlacement() == ZPLJavaBarcode.BarcodeTextPlacement.TEXT_ABOVE){
                    tempBarcode.setMarginTop(30);
                    componentNext = tempBarcode;
                }
            }
            componentNext.generateInstruction();
        }

        generateLabelCode();
    }
    public void setComponents(ArrayList<ZPLJavaComponent> components) {
        this.components = components;
        generateLabelCode();
    }

    public String getLabelCode() {
        return labelCode;
    }
    public void setLabelCode(String labelCode) {
        this.labelCode = labelCode;
    }
    public int getLabelWidth() {
        return labelWidth;
    }
    public int getLabelHeight() {
        return labelHeight;
    }
    public int getLabelHeightInches() {
        return labelHeightInches;
    }
    public int getLabelWidthInches() {
        return labelWidthInches;
    }
    // -------------------------------- appearance --------------------------------

    /**
     * <h3>Call this after applying all components to label</h3>
     * Call this function to set a rectangle all over the label.
     * To implement border correctly, you have to reduce the available canvas to the user, in order to
     * avoid component conflict by using {@link ZPLJavaComponent#setMargins(int, int, int, int)} method.
     * @param margin add outer margin to border
     */
    public void applyBorderBox(int margin){
        ZPLJavaRectangle border = new ZPLJavaRectangle();
        border.setId("borderBox");
        border.setWidth(labelWidth);
        border.setHeight(labelHeight);
        border.setMargins(margin);
        addComponent(border);
    }

    public boolean isUtf8FormatEnabled() {
        return utf8FormatEnabled;
    }
    public void setUtf8FormatEnabled(boolean utf8FormatEnabled) {
        this.utf8FormatEnabled = utf8FormatEnabled;
    }
}
